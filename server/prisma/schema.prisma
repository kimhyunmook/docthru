// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model example {
  uuid     String  @id @default(uuid())
  require  String  @default("필수")
  optional String? @default("옵션 (없어도 됨)")
}

model user {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  password               String
  nickname               String                   @unique
  grade                  String                   @default("일반")
  like                   Int                      @default(0)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  challenge              challenge[]
  participants           participant[]
  challengework          challengework[]
  challengework_feedback challengework_feedback[]
  alarm                  alarm[]
}

model alarm {
  id        Int      @id @default(autoincrement())
  content   String
  read      Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model challenge {
  id            Int             @id @default(autoincrement())
  title         String          @default("")
  originalLink  String          @default("")
  field         String          @default("")
  documentType  String          @default("")
  date          DateTime
  current       Int             @default(0)
  maximum       Int
  content       String
  state         String          @default("inProgress")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  oner          user            @relation(fields: [onerId], references: [id])
  onerId        String
  participants  participant[]
  challengework challengework[]
}

model challengework {
  id          Int       @id @default(autoincrement())
  content     String
  user        user      @relation(fields: [userId], references: [id])
  userId      String
  challenge   challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
}

model challengework_feedback {
  id        Int      @id @default(autoincrement())
  content   String
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model participant {
  id              Int       @id @default(autoincrement())
  users           user      @relation(fields: [userId], references: [id])
  userId          String
  state           String    @default("pending")
  applicationDate DateTime  @default(now())
  participantDate DateTime  @updatedAt
  challenge       challenge @relation(fields: [challengeId], references: [id])
  challengeId     Int
}
